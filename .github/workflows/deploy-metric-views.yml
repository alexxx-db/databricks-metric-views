name: Deploy Metric Views with DABs

on:
  push:
    branches:
      - main
    paths:
      - 'view_definitions/**/*.yml'
      - 'view_definitions/**/*.yaml'
      - 'simple_deploy_metric_views.py'
      - 'databricks.yml'
      - 'resources/**/*'
      - 'scripts/**/*'
  pull_request:
    branches:
      - main
    paths:
      - 'view_definitions/**/*.yml'
      - 'view_definitions/**/*.yaml'
      - 'simple_deploy_metric_views.py'
      - 'databricks.yml'
      - 'resources/**/*'
      - 'scripts/**/*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

# env:
#   DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
#   DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}

jobs:
  validate:
    name: Comprehensive Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # - name: Setup Databricks CLI
      #   uses: databricks/setup-cli@main

      - name: Install Python dependencies
        run: |
          pip install pyyaml jinja2

      - name: Enhanced YAML validation
        run: |
          python scripts/validate_yaml.py view_definitions/ --strict --format text

      - name: Validate environment configurations
        run: |
          python scripts/environment_manager.py validate

      - name: Test template rendering
        run: |
          echo "Checking for template files..."
          if ls view_definitions/*.j2 1> /dev/null 2>&1; then
            for env in dev staging prod; do
              echo "Testing template rendering for $env environment..."
              for template in view_definitions/*.j2; do
                python scripts/environment_manager.py test "$template" $env
              done
            done
          else
            echo "‚úÖ No template files found to test - using simple deployment mode"
          fi

      # - name: Validate DABs bundle configuration
      #   run: |
      #     databricks bundle validate --target dev

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Setup Databricks CLI
      #   uses: databricks/setup-cli@main

      # - name: Deploy to development
      #   run: |
      #     databricks bundle deploy --target dev

      # - name: Run enhanced metric views deployment job
      #   run: |
      #     databricks bundle run --target dev metric_views_deployment

      - name: Get deployment results
        if: always()
        run: |
          # Try to get deployment status from the latest deployment tracker
          echo "üìä === Deployment Summary ===" > deployment_summary.md
          python -c "
          import sys
          sys.path.append('scripts')
          try:
              from deployment_tracker import DeploymentTracker
              tracker = DeploymentTracker()
              summary = tracker.get_latest_deployment()
              if summary:
                  report = tracker.generate_report(summary)
                  print(report)
                  with open('deployment_summary.md', 'w') as f:
                      f.write(report)
              else:
                  print('No deployment tracking data available')
          except Exception as e:
              print(f'Error getting deployment status: {e}')
          " || echo "Could not retrieve deployment status"

      - name: Add PR comment with deployment results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = 'üöÄ **Enhanced Metric Views Deployment Complete**\n\n';
            
            try {
              const summary = fs.readFileSync('deployment_summary.md', 'utf8');
              body += '## Deployment Results\n```\n' + summary + '\n```';
            } catch (error) {
              body += '‚úÖ Deployment completed successfully in **development** environment!\n';
              body += 'Note: Detailed deployment tracking not available.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

  deploy-staging:
    name: Deploy to Staging  
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Setup Databricks CLI
      #   uses: databricks/setup-cli@main

      # - name: Deploy to staging
      #   run: |
      #     databricks bundle deploy --target staging

      # - name: Run metric views deployment job
      #   run: |
      #     databricks bundle run --target staging metric_views_deployment

      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ Successfully deployed metric views to staging environment"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Setup Databricks CLI  
      #   uses: databricks/setup-cli@main

      # - name: Deploy to production
      #   run: |
      #     databricks bundle deploy --target prod

      # - name: Run metric views deployment job
      #   run: |
      #     databricks bundle run --target prod metric_views_deployment

      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ Successfully deployed metric views to production environment"

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [validate, deploy-dev, deploy-staging, deploy-prod]
    if: failure()
    steps:
      - name: Send failure notification
        run: |
          echo "‚ùå Metric Views deployment failed. Check the logs for details."
